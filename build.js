#!/usr/bin/env node

/**
 * Build script for hiREZZIE Chrome Extension
 * Reads environment variables and generates config.js
 */

const fs = require('fs');
const path = require('path');

// Environment variables to read
const ENV_VARS = {
  BRAVE_KEY: 'brave.apiKey',
  SERPAPI_KEY: 'serpapi.apiKey', 
  GOOGLEIMAGES_KEY: 'google.apiKey',
  GOOGLE_SEARCH_KEY: 'google.searchEngineId',
  GNEWS_KEY: 'newsapi.apiKey'
};

function generateConfig() {
  console.log('üîß Building hiREZZIE configuration...');
  
  // Build the API_CONFIG object from environment variables
  const config = {
    google: {
      apiKey: process.env.GOOGLEIMAGES_KEY || 'YOUR_GOOGLEIMAGES_KEY_VALUE_HERE',
      searchEngineId: process.env.GOOGLE_SEARCH_KEY || 'YOUR_GOOGLE_SEARCH_KEY_VALUE_HERE'
    },
    brave: {
      apiKey: process.env.BRAVE_KEY || 'YOUR_BRAVE_KEY_VALUE_HERE'
    },
    serpapi: {
      apiKey: process.env.SERPAPI_KEY || 'YOUR_SERPAPI_KEY_VALUE_HERE'
    },
    newsapi: {
      apiKey: process.env.GNEWS_KEY || 'YOUR_GNEWS_KEY_VALUE_HERE'
    }
  };

  // Check which keys are configured
  const configuredKeys = [];
  const missingKeys = [];
  
  Object.entries(ENV_VARS).forEach(([envVar, configPath]) => {
    if (process.env[envVar]) {
      configuredKeys.push(envVar);
    } else {
      missingKeys.push(envVar);
    }
  });

  // Log configuration status
  console.log(`‚úÖ Configured API keys: ${configuredKeys.length ? configuredKeys.join(', ') : 'None'}`);
  if (missingKeys.length > 0) {
    console.log(`‚ö†Ô∏è  Missing API keys: ${missingKeys.join(', ')}`);
    console.log('   Extension will use placeholder values for missing keys.');
  }

  // Generate the config.js file
  const configContent = `// Auto-generated configuration file
// DO NOT EDIT - This file is generated by build.js from environment variables

const API_CONFIG = ${JSON.stringify(config, null, 2)};
`;

  // Write config.js
  const configPath = path.join(__dirname, 'config.js');
  fs.writeFileSync(configPath, configContent, 'utf8');
  
  console.log(`üìù Generated config.js with ${configuredKeys.length} configured API keys`);
  console.log('üöÄ Build complete!');
  
  return true;
}

// Run the build
try {
  generateConfig();
  process.exit(0);
} catch (error) {
  console.error('‚ùå Build failed:', error.message);
  process.exit(1);
}